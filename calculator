package main

import (
	"errors"
	"fmt"
	"strconv"
	"strings"
)

func Calc(expression string) (float64, error) {
	tokens := tokenize(expression)
	return form(tokens)
}
func tokenize(expr string) []string {
	expr = strings.ReplaceAll(expr, " ", "")
	var tokens []string
	var num strings.Builder

	for _, char := range expr {
		switch char {
		case '+', '-', '*', '/', '(', ')':
			if num.Len() > 0 {
				tokens = append(tokens, num.String())
				num.Reset()
			}
			tokens = append(tokens, string(char))
		default:
			num.WriteRune(char)
		}
	}

	if num.Len() > 0 {
		tokens = append(tokens, num.String())
	}
	return tokens
}

func form(tokens []string) (float64, error) {
	output := []string{}
	operators := []string{}

	precedence := map[string]int{
		"+": 1,
		"-": 1,
		"*": 2,
		"/": 2,
		"(": 0,
	}

	for _, token := range tokens {
		if _, err := strconv.ParseFloat(token, 64); err == nil {
			output = append(output, token)
		} else if token == "(" {
			operators = append(operators, token)
		} else if token == ")" {
			for len(operators) > 0 && operators[len(operators)-1] != "(" {
				output = append(output, operators[len(operators)-1])
				operators = operators[:len(operators)-1]
			}
			if len(operators) == 0 {
				return 0, errors.New("mismatched parentheses")
			}
			operators = operators[:len(operators)-1]
		} else {
			for len(operators) > 0 && precedence[token] <= precedence[operators[len(operators)-1]] {
				output = append(output, operators[len(operators)-1])
				operators = operators[:len(operators)-1]
			}
			operators = append(operators, token)
		}
	}
	for len(operators) > 0 {
		output = append(output, operators[len(operators)-1])
		operators = operators[:len(operators)-1]
	}
	return reshit(output)
}
func reshit(tokens []string) (float64, error) {
	stack := []float64{}
	for _, token := range tokens {
		if num, err := strconv.ParseFloat(token, 64); err == nil { // Если токен - число
			stack = append(stack, num)
		} else {
			if len(stack) < 2 {
				return 0, errors.New("invalid expression")
			}
			b := stack[len(stack)-1]
			a := stack[len(stack)-2]
			stack = stack[:len(stack)-2]

			var result float64
			switch token {
			case "+":
				result = a + b
			case "-":
				result = a - b
			case "*":
				result = a * b
			case "/":
				if b == 0 {
					return 0, errors.New("division by zero")
				}
				result = a / b
			default:
				return 0, errors.New("invalid operator")
			}
			stack = append(stack, result)
		}
	}

	if len(stack) != 1 {
		return 0, errors.New("invalid expression")
	}
	return stack[0], nil
}

func main() {
	result, err := Calc("3 + 5 * (2 - 8)")
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(result)
	}
}
